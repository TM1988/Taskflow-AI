rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Function to check if user is a member of a project
    function isProjectMember(projectId) {
      let project = get(/databases/$(database)/documents/projects/$(projectId)).data;
      return isAuthenticated() && 
             (request.auth.uid == project.ownerId || 
              request.auth.uid in project.members);
    }
    
    // Users collection - users can only read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Anyone authenticated can read their own projects or projects they're a member of
      allow read: if isAuthenticated() && 
                  (resource.data.ownerId == request.auth.uid || 
                   request.auth.uid in resource.data.members);
      
      // Only the owner can delete a project
      allow delete: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      
      // Creating new projects - validate data structure
      allow create: if isAuthenticated() && 
                   request.resource.data.ownerId == request.auth.uid &&
                   (request.resource.data.members is list || !('members' in request.resource.data));
      
      // Updating projects - validate update operations
      allow update: if isAuthenticated() && 
                   (resource.data.ownerId == request.auth.uid || 
                    request.auth.uid in resource.data.members) &&
                   (request.resource.data.ownerId == resource.data.ownerId); // Can't change owner
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      // Users can only access tasks from projects they're members of
      allow read: if isAuthenticated() && isProjectMember(resource.data.projectId);
      
      // Creating tasks in projects users are members of
      allow create: if isAuthenticated() && isProjectMember(request.resource.data.projectId);
      
      // Updates and deletes must maintain project membership
      allow update, delete: if isAuthenticated() && 
                           isProjectMember(resource.data.projectId) &&
                           (request.resource.data.projectId == resource.data.projectId); // Can't move to another project
    }
    
    // Columns collection
    match /columns/{columnId} {
      // Users can only access columns from projects they're members of
      allow read: if isAuthenticated() && isProjectMember(resource.data.projectId);
      
      // Creating columns in projects users are members of
      allow create: if isAuthenticated() && isProjectMember(request.resource.data.projectId);
      
      // Updates and deletes must maintain project membership
      allow update, delete: if isAuthenticated() && 
                           isProjectMember(resource.data.projectId) &&
                           (request.resource.data.projectId == resource.data.projectId); // Can't move to another project
    }
    
    // GitHub tokens - users can only access their own tokens
    match /githubTokens/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Repositories collection
    match /repositories/{repoId} {
      // Users can only access repositories from projects they're members of
      allow read: if isAuthenticated() && isProjectMember(resource.data.projectId);
      
      // Creating repositories for projects users are members of
      allow create: if isAuthenticated() && isProjectMember(request.resource.data.projectId);
      
      // Updates and deletes must maintain project membership
      allow update, delete: if isAuthenticated() && isProjectMember(resource.data.projectId);
    }
  }
}