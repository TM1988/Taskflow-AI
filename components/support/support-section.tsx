'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import {
  HelpCircle,
  Mail,
  MessageSquare,
  Book,
  ExternalLink
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface SupportSectionProps {
  userId: string;
  userEmail: string;
  className?: string;
  organizationId?: string;
  organizationName?: string;
}

const SupportSection: React.FC<SupportSectionProps> = ({
  userId,
  userEmail,
  className = '',
  organizationId,
  organizationName
}) => {
  const [activeTab, setActiveTab] = useState<'help' | 'contact'>('help');
  const [supportForm, setSupportForm] = useState({
    subject: '',
    category: '',
    priority: 'medium' as const,
    description: '',
    attachments: [] as File[]
  });
  const [emailTemplate, setEmailTemplate] = useState<string>('');
  const [showEmailTemplate, setShowEmailTemplate] = useState(false);

  const { toast } = useToast();

  const supportCategories = [
    { value: 'general', label: 'General Question' },
    { value: 'technical', label: 'Technical Issue' },
    { value: 'billing', label: 'Billing & Pricing' },
    { value: 'feature_request', label: 'Feature Request' },
    { value: 'bug_report', label: 'Bug Report' },
    { value: 'account', label: 'Account Issues' },
    { value: 'limits', label: 'Limit Increase Request' },
    { value: 'other', label: 'Other' }
  ];

  const priorityOptions = [
    { value: 'low', label: 'Low', description: 'General questions, non-urgent' },
    { value: 'medium', label: 'Medium', description: 'Standard support request' },
    { value: 'high', label: 'High', description: 'Business impact, needs attention' },
    { value: 'urgent', label: 'Urgent', description: 'Critical issue, immediate help needed' }
  ];

  const faqItems = [
    {
      question: 'How do I increase my organization or project limits?',
      answer: 'You can request limit increases by contacting our support team. Use the "Limit Increase Request" category in the contact form below and specify which limits you need increased and why.'
    },
    {
      question: 'How do I recover deleted items?',
      answer: 'Deleted items are soft-deleted and can be recovered within 24 hours. Check the Recovery section in your organization or project settings to restore deleted items.'
    },
    {
      question: 'How do I transfer organization ownership?',
      answer: 'Organization owners can transfer ownership in the Security tab of organization settings. The new owner must accept the transfer within 7 days.'
    },
    {
      question: 'How do I manage team member permissions?',
      answer: 'Use the Roles tab in organization settings to create custom roles and assign permissions. You can also use bulk actions to manage multiple users at once.'
    },
    {
      question: 'How do notifications work?',
      answer: 'Taskflow uses in-app notifications for most activities. Email notifications are only sent for organization invitations. You can manage your notification preferences in your user settings.'
    },
    {
      question: 'How do I collaborate on personal boards?',
      answer: 'Personal boards support collaboration. Enable collaboration in your personal board settings and invite team members with viewer, editor, or admin roles.'
    }
  ];

  const generateEmailTemplate = () => {
    const categoryLabel = supportCategories.find(cat => cat.value === supportForm.category)?.label || supportForm.category;
    const priorityLabel = priorityOptions.find(p => p.value === supportForm.priority)?.label || supportForm.priority;
    
    const template = `Subject: ${supportForm.subject}

Dear Taskflow Support Team,

Category: ${categoryLabel}
Priority: ${priorityLabel}
${organizationName ? `Organization: ${organizationName} (ID: ${organizationId})` : ''}
User Email: ${userEmail}
User ID: ${userId}

Issue Description:
${supportForm.description}

Best regards,
${userEmail}

---
Generated by Taskflow Support Assistant
Date: ${new Date().toLocaleString()}`;

    setEmailTemplate(template);
    setShowEmailTemplate(true);
  };

  const copyEmailTemplate = async () => {
    try {
      await navigator.clipboard.writeText(emailTemplate);
      toast({
        title: 'Email Template Copied',
        description: 'The email template has been copied to your clipboard. You can now send it to support@taskflow-ai.tech'
      });
    } catch (error) {
      toast({
        title: 'Copy Failed',
        description: 'Failed to copy to clipboard. Please manually copy the text.',
        variant: 'destructive'
      });
    }
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Navigation */}
      <div className="flex space-x-1 bg-muted p-1 rounded-lg">
        <Button
          variant={activeTab === 'help' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('help')}
          className="flex-1"
        >
          <Book className="h-4 w-4 mr-2" />
          Help & FAQ
        </Button>
        <Button
          variant={activeTab === 'contact' ? 'default' : 'ghost'}
          onClick={() => setActiveTab('contact')}
          className="flex-1"
        >
          <MessageSquare className="h-4 w-4 mr-2" />
          Contact Support
        </Button>
      </div>

      {/* Help & FAQ Tab */}
      {activeTab === 'help' && (
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Book className="h-5 w-5" />
                Frequently Asked Questions
              </CardTitle>
            </CardHeader>
            <CardContent>
              <Accordion type="single" collapsible className="w-full">
                {faqItems.map((item, index) => (
                  <AccordionItem key={index} value={`item-${index}`}>
                    <AccordionTrigger>{item.question}</AccordionTrigger>
                    <AccordionContent>
                      <p className="text-muted-foreground">{item.answer}</p>
                    </AccordionContent>
                  </AccordionItem>
                ))}
              </Accordion>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Button variant="outline" className="justify-start h-auto p-4">
                  <div className="text-left">
                    <div className="font-medium">Request Limit Increase</div>
                    <div className="text-sm text-muted-foreground">
                      Need more projects, tasks, or organization members?
                    </div>
                  </div>
                  <ExternalLink className="h-4 w-4 ml-auto" />
                </Button>
                
                <Button variant="outline" className="justify-start h-auto p-4">
                  <div className="text-left">
                    <div className="font-medium">Recovery Center</div>
                    <div className="text-sm text-muted-foreground">
                      Recover deleted items within 24 hours
                    </div>
                  </div>
                  <ExternalLink className="h-4 w-4 ml-auto" />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Contact Support Tab */}
      {activeTab === 'contact' && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <MessageSquare className="h-5 w-5" />
              Contact Support
            </CardTitle>
          </CardHeader>
          <CardContent>
            <Alert className="mb-6">
              <Mail className="h-4 w-4" />
              <AlertDescription>
                For urgent issues, you can also email us directly at{' '}
                <a href="mailto:support@taskflow-ai.tech" className="font-medium underline">
                  support@taskflow-ai.tech
                </a>
              </AlertDescription>
            </Alert>

            <form onSubmit={(e) => {
              e.preventDefault();
              if (!supportForm.subject.trim() || !supportForm.description.trim() || !supportForm.category) {
                toast({
                  title: 'Validation Error',
                  description: 'Please fill in all required fields',
                  variant: 'destructive'
                });
                return;
              }
              generateEmailTemplate();
            }} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="subject">Subject *</Label>
                  <Input
                    id="subject"
                    value={supportForm.subject}
                    onChange={(e) => setSupportForm({ ...supportForm, subject: e.target.value })}
                    placeholder="Brief description of your issue"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="category">Category *</Label>
                  <Select
                    value={supportForm.category}
                    onValueChange={(value) => setSupportForm({ ...supportForm, category: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      {supportCategories.map((category) => (
                        <SelectItem key={category.value} value={category.value}>
                          {category.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="priority">Priority</Label>
                <Select
                  value={supportForm.priority}
                  onValueChange={(value) => setSupportForm({ ...supportForm, priority: value as any })}
                >
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {priorityOptions.map((option) => (
                      <SelectItem key={option.value} value={option.value}>
                        <div>
                          <div className="font-medium">{option.label}</div>
                          <div className="text-xs text-muted-foreground">{option.description}</div>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">Description *</Label>
                <Textarea
                  id="description"
                  value={supportForm.description}
                  onChange={(e) => setSupportForm({ ...supportForm, description: e.target.value })}
                  placeholder="Please provide as much detail as possible about your issue..."
                  rows={6}
                  required
                />
              </div>

              <Button type="submit" className="w-full">
                <Mail className="h-4 w-4 mr-2" />
                Generate Email Template
              </Button>
            </form>

            {showEmailTemplate && (
              <div className="mt-6 space-y-4">
                <div className="border rounded-lg p-4 bg-muted">
                  <div className="flex items-center justify-between mb-2">
                    <h4 className="font-medium">Email Template Generated</h4>
                    <Button onClick={copyEmailTemplate} size="sm">
                      Copy to Clipboard
                    </Button>
                  </div>
                  <pre className="text-sm whitespace-pre-wrap text-muted-foreground">
                    {emailTemplate}
                  </pre>
                </div>
                <Alert>
                  <Mail className="h-4 w-4" />
                  <AlertDescription>
                    Copy the template above and send it to{' '}
                    <a href={`mailto:support@taskflow-ai.tech?subject=${encodeURIComponent(supportForm.subject)}&body=${encodeURIComponent(emailTemplate)}`} className="font-medium underline">
                      support@taskflow-ai.tech
                    </a>
                  </AlertDescription>
                </Alert>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default SupportSection;
